'use strict'
const REGION_CONFIG_PATH = '/DP/REGION/CONFIG'

let localConfig = require('../idc.json')
let init = false

// zk数据覆盖本地数据
let config = localConfig

// ip->region的本地缓存
let ipRegionMap = {}

function resetConfig(conf) {
    try {
        config = JSON.parse(conf)
        ipRegionMap = {}
    } catch (e) {
    }
}

/**
 * 初始化region配置
 * 由整个zk的init方法中调用
 */
exports.initRegionConfig = function* (client) {
    if (init) {
        return
    }
    init = true
    let remoteConfig = yield client.getAndWatch(REGION_CONFIG_PATH, (res) => {
        if (res.data) {
            resetConfig(res.data)
        }
    })

    if (remoteConfig != null) {
        resetConfig(remoteConfig)
    }
}

/**
 * get region by ip
 * @param {string} ip ip地址
 * @return {string} region名称，如beijing，shanghai,没有匹配时返回null
 */
exports.getRegion = function(ip) {
    if (!ip) {
        return null
    }

    if (ip in ipRegionMap) {
        return ipRegionMap[ip]
    }

    for (let regionConfig of config.regions) {
        let region = regionConfig.region
        for (let idc of regionConfig.idcs) {
            for (let net of idc.net) {
                if (ip.indexOf(net) === 0) {
                    ipRegionMap[ip] = region
                    return region
                }
            }
        }
    }
    return null
}
