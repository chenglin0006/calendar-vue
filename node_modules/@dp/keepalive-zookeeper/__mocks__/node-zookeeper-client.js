'use strict'
const ZK = jest.genMockFromModule('node-zookeeper-client')
const EventEmitter = require('events')

const zkData = {
    'key1': 'value1'
}
class Storage extends EventEmitter {
    get(path) {
        return zkData[path] || null
    }
    set(path, value) {
        setTimeout(() => {
            let exists = path in zkData
            zkData[path] = value
            if (exists) {
                this.emit(`change:${path}`)
            } else {
                this.emit(`add:${path}`)
            }
        }, 0)
    }
    exists(path) {
        return path in zkData
    }
    delete(path) {
        setTimeout(() => {
            delete zkData[path]
            this.emit(`delete:${path}`)
        }, 0)
    }
}

const storage = new Storage()
storage.setMaxListeners(100)

class Client extends EventEmitter {
    connect() {
        setTimeout(() => {
            this.emit('connected')
        }, 0)
    }
    getData(path, watcher, callback) {
        if (!callback) {
            callback = watcher
            watcher = null
        }
        setTimeout(() => {
            if (storage.exists(path)) {
                callback(null, Buffer.from(storage.get(path)), {})
                if (watcher) {
                    storage.once(`change:${path}`, () => {
                        watcher({
                            getName: () => 'NODE_DATA_CHANGED'
                        })
                    })
                    storage.once(`delete:${path}`, () => {
                        watcher({
                            getName: () => 'NODE_DELETED'
                        })
                    })
                }
            } else {
                callback(new Error(), null, null)
            }
        }, 0)
    }
    exists(path, watcher, callback) {
        if (!callback) {
            callback = watcher
            watcher = null
        }
        setTimeout(() => {
            callback(null, storage.exists(path))
            if (watcher) {
                storage.once(`change:${path}`, () => {
                    watcher({
                        getName: () => 'NODE_DATA_CHANGED'
                    })
                })
                storage.once(`delete:${path}`, () => {
                    watcher({
                        getName: () => 'NODE_DELETED'
                    })
                })
                storage.once(`add:${path}`, () => {
                    watcher({
                        getName: () => 'NODE_CREATED'
                    })
                })
            }
        }, 0)
    }
}

ZK.createClient = () => {
    return new Client()
}

ZK.__mockStorage = storage

module.exports = ZK
